// Тест демонстрирует общий подход к разработке сценарных тестов.
// 1. Тест вначале определяет набор входных данных для тестирования. Набор данных имеет версию.
// 2. Тест по созданному набору данных создает окружение: необходимые справочники, документы т.д.
// 3. Тест выполняет целевую задачу – фактически то, что требуется протестировать
//
// Целевые проверки:
// - Ввод нового документа
// - Заполнение шапки и табличной части
// - Запись и проведение
// - Проверка бизнес логики: движения документа
// - Проверка бизнес логики: отчет Задолженность поставщикам

// ************************************************
// Стандартные операции:
// - Определение глобальных переменных
// - Подключение к тестируемому приложению
// - Закрытие всех окон
// ************************************************

Вызвать ( "Общее.Начало" );
ЗакрытьВсё ();

// ***********************************************************
// Определение и создание окружения с передачей версии данных.
// Версия данных формируется по ctrl+shift+i
// Каждый раз меняя версию данных, сценарий будет
// создавать новый набор тестовых данных
// ***********************************************************

тест = окружение ( "2563E596" );
создатьОкружение ( тест );

// ************************************
// Целевой сценарий: создание документа
// ************************************

док = Вызвать ( "Документы.ЗаказПоставщику.Создать.Параметры" );
док.Организация = тест.Организация;
док.Поставщик = тест.поставщик;
док.ОставитьОткрытым = истина;
товары = док.Товары;
для каждого товар из тест.Товары цикл
	п = Вызвать ( "Документы.ЗаказПоставщику.Создать.Строка" );
	п.Товар = товар.Товар;
	п.Количество = товар.Количество;
	п.Цена = товар.Цена;
	товары.Добавить ( п );
конеццикла;
номер = Вызвать ( "Документы.ЗаказПоставщику.Создать", док );

// ************************************************
// Проверка бизнес-логики: через движения документа
// ************************************************

Здесь ( "Заказ поставщику " + номер + "*" );
Вызвать ( "Общее.ПроверитьДвижения" );

// ***********************************
// Проверка бизнес-логики: через отчет
// ***********************************

Позвать ( "ЗадолженностьПоставщикам", тест.Поставщик );

// *********************************************
// Процедуры
// *********************************************

Функция окружение ( ИД )

	п = новый Структура ();
	п.Вставить ( "ИД", ИД );
	п.Вставить ( "Поставщик", "_Поставщик " + ид );
	п.Вставить ( "Организация", "Деловой союз" );
	п.Вставить ( "Товары", определитьТовары ( ид ) );
	возврат п;

КонецФункции

Функция определитьТовары ( ИД )

	список = новый Массив ();
	список.Добавить ( новыйТовар ( "_Товар1 " + ИД, 5, 150 ) );
	список.Добавить ( новыйТовар ( "_Товар2 " + ИД, 15, 250 ) );
	список.Добавить ( новыйТовар ( "_Товар3 " + ИД, 25, 350 ) );
	возврат список;

КонецФункции

Функция новыйТовар ( Товар, Количество, Цена )

	п = новый Структура ();
	п.Вставить ( "Товар", Товар );
	п.Вставить ( "Количество", Количество );
	п.Вставить ( "Цена", Цена );
	возврат п;

КонецФункции

Процедура создатьОкружение ( Тест )

	ид = Тест.ИД;
	
	// *****************************************************
	// Проверяем, нужно ли создавать данные для тестирования
	// *****************************************************
	
	если ( Вызвать ( "Общее.ОкружениеСоздано", ид ) ) тогда
		возврат;
	конецесли;
	
	// ******************
	// Создаем поставщика
	// ******************
	
	п = Вызвать ( "Справочники.Поставщики.Создать.Параметры" );
	п.Наименование = Тест.Поставщик;
	п = Вызвать ( "Справочники.Поставщики.Создать", п );

	// **************
	// Создаем товары
	// **************
	
	для каждого товар из Тест.Товары цикл
		п = Вызвать ( "Справочники.Номенклатура.Создать.Параметры" );
		п.Наименование = товар.Товар;
		Вызвать ( "Справочники.Номенклатура.Создать", п );
	конеццикла;

	// ********************************
	// Регистрируем созданное окружение
	// ********************************
	
	Вызвать ( "Общее.ШтампОкружения", ид );

КонецПроцедуры
